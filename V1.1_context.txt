<file path="contracts\LiquidityPool.sol">
<![CDATA[
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";

contract LiquidityPool is ERC721Enumerable {
    using SafeERC20 for IERC20;

    address public immutable token0;
    address public immutable token1;
    uint256 public immutable feeRate; // 0.3% = 30, 1% = 100

    uint256 public reserve0;
    uint256 public reserve1;

    struct Position {
        uint256 lowerSqrtPrice;
        uint256 upperSqrtPrice;
        uint256 liquidity0;
        uint256 liquidity1;
        uint256 collectedFee0;
        uint256 collectedFee1;
        address owner;
    }

    Position[] public positions;
    uint256 private _tokenIdCounter;

    event LiquidityAdded(uint256 indexed tokenId, uint256 amount0, uint256 amount1);
    event LiquidityRemoved(uint256 indexed tokenId, uint256 amount0, uint256 amount1);
    event Swap(address indexed user, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);

    constructor(
        address _token0,
        address _token1,
        uint256 _feeRate
    ) ERC721("LPToken", "LP-NFT") {
        token0 = _token0;
        token1 = _token1;
        feeRate = _feeRate;
    }

    function addLiquidity(
        uint256 amount0,
        uint256 amount1,
        uint256 lowerSqrtPrice,
        uint256 upperSqrtPrice
    ) external {
        require(amount0 > 0 && amount1 > 0, "Amounts must be > 0");
        require(lowerSqrtPrice < upperSqrtPrice, "Invalid price range");

        IERC20(token0).safeTransferFrom(msg.sender, address(this), amount0);
        IERC20(token1).safeTransferFrom(msg.sender, address(this), amount1);

        reserve0 += amount0;
        reserve1 += amount1;

        uint256 tokenId = _tokenIdCounter++;
        positions.push(Position({
            lowerSqrtPrice: lowerSqrtPrice,
            upperSqrtPrice: upperSqrtPrice,
            liquidity0: amount0,
            liquidity1: amount1,
            collectedFee0: 0,
            collectedFee1: 0,
            owner: msg.sender
        }));
        _mint(msg.sender, tokenId);

        emit LiquidityAdded(tokenId, amount0, amount1);
    }

    function removeLiquidity(uint256 tokenId) external {
        require(ownerOf(tokenId) == msg.sender, "Only owner can remove liquidity");
        Position storage pos = positions[tokenId];

        reserve0 -= pos.liquidity0;
        reserve1 -= pos.liquidity1;

        IERC20(token0).safeTransfer(msg.sender, pos.liquidity0 + pos.collectedFee0);
        IERC20(token1).safeTransfer(msg.sender, pos.liquidity1 + pos.collectedFee1);

        _burn(tokenId);
        emit LiquidityRemoved(tokenId, pos.liquidity0, pos.liquidity1);
    }

    function swap(address tokenIn, uint256 amountIn) external {
        require(tokenIn == token0 || tokenIn == token1, "Invalid token");
        require(amountIn > 0, "Amount must be > 0");

        if (tokenIn == token0) {
            uint256 amountOut = (amountIn * reserve1) / reserve0;
            require(reserve1 >= amountOut, "Insufficient liquidity");

            IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);
            IERC20(token1).safeTransfer(msg.sender, amountOut);

            reserve0 += amountIn;
            reserve1 -= amountOut;

            emit Swap(msg.sender, token0, token1, amountIn, amountOut);
        } else {
            uint256 amountOut = (amountIn * reserve0) / reserve1;
            require(reserve0 >= amountOut, "Insufficient liquidity");

            IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);
            IERC20(token0).safeTransfer(msg.sender, amountOut);

            reserve1 += amountIn;
            reserve0 -= amountOut;

            emit Swap(msg.sender, token1, token0, amountIn, amountOut);
        }
    }

    function getReserves() external view returns (uint256, uint256) {
        return (reserve0, reserve1);
    }

    function getPosition(uint256 tokenId) external view returns (Position memory) {
        return positions[tokenId];
    }
}
]]>
</file>
<file path="contracts\MockERC20.sol">
<![CDATA[
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MockERC20 is ERC20 {
    constructor(string memory name, string memory symbol, uint256 initialSupply) ERC20(name, symbol) {
        _mint(msg.sender, initialSupply);
    }
}
]]>
</file>
<file path="contracts\PoolFactory.sol">
<![CDATA[
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "./LiquidityPool.sol";

contract PoolFactory {
    address public owner;
    address[] public allPools;
    
    // Структура для хранения пар токенов
    struct TokenPair {
        address token0;
        address token1;
    }
    
    // Маппинг для быстрой проверки существующих пулов
    // Используем упорядоченные адреса для ключа, чтобы избежать дубликатов (tokenA-tokenB и tokenB-tokenA)
    mapping(bytes32 => address) public getPool; 
    
    event PoolCreated(address indexed token0, address indexed token1, address pool, uint256 feeRate);

    constructor() {
        owner = msg.sender;
    }

    // Модификатор для функций, доступных только владельцу
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner");
        _;
    }

    // Функция создания пула теперь доступна всем
    function createPool(
        address token0,
        address token1,
        uint256 feeRate
    ) external returns (address) {
        require(token0 != address(0) && token1 != address(0), "Zero address");
        require(token0 != token1, "Same tokens");
        require(feeRate > 0 && feeRate <= 1000, "Invalid fee rate"); // 0.01% to 10%
        
        // Создаем упорядоченную пару токенов для ключа
        (address tokenA, address tokenB) = token0 < token1 ? (token0, token1) : (token1, token0);
        bytes32 pairKey = keccak256(abi.encodePacked(tokenA, tokenB, feeRate));
        
        // Проверяем, существует ли уже пул с такой парой токенов и комиссией
        require(getPool[pairKey] == address(0), "Pool already exists");
        
        LiquidityPool newPool = new LiquidityPool(token0, token1, feeRate);
        allPools.push(address(newPool));
        getPool[pairKey] = address(newPool);
        
        emit PoolCreated(token0, token1, address(newPool), feeRate);
        return address(newPool);
    }

    function getPools() external view returns (address[] memory) {
        return allPools;
    }
    
    // Функция для проверки существования пула (может быть полезна для фронтенда)
    function poolExists(address token0, address token1, uint256 feeRate) external view returns (bool) {
        (address tokenA, address tokenB) = token0 < token1 ? (token0, token1) : (token1, token0);
        bytes32 pairKey = keccak256(abi.encodePacked(tokenA, tokenB, feeRate));
        return getPool[pairKey] != address(0);
    }
}
]]>
</file>
<file path="contracts\TokenVault.sol">
<![CDATA[
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract TokenVault is ReentrancyGuard {
    using SafeMath for uint256;

    struct Deposit {
        address tokenAddress;
        uint256 amount;
        address depositor;
    }

    Deposit[] public deposits;
    mapping(address => uint256[]) private _depositorDeposits;

    event TokensDeposited(
        address indexed token,
        address indexed depositor,
        uint256 amount,
        uint256 depositId
    );

    event TokensWithdrawn(
        address indexed token,
        address indexed depositor,
        uint256 amount,
        uint256 depositId
    );

    // Депозит токенов в хранилище
    function deposit(address tokenAddress, uint256 amount) external nonReentrant {
        require(amount > 0, "Amount must be > 0");
        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount), "Transfer failed");

        uint256 depositId = deposits.length;
        deposits.push(Deposit({
            tokenAddress: tokenAddress,
            amount: amount,
            depositor: msg.sender
        }));

        _depositorDeposits[msg.sender].push(depositId);

        emit TokensDeposited(tokenAddress, msg.sender, amount, depositId);
    }

    // Вывод своих токенов из хранилища
    function withdraw(uint256 depositId) external nonReentrant {
        Deposit storage deposit = deposits[depositId];

        require(deposit.depositor == msg.sender, "Only depositor can withdraw");
        require(deposit.amount > 0, "Already withdrawn");

        IERC20(deposit.tokenAddress).transfer(msg.sender, deposit.amount);
        uint256 amount = deposit.amount;
        deposit.amount = 0;

        emit TokensWithdrawn(deposit.tokenAddress, msg.sender, amount, depositId);
    }

    // Получить список депозитов пользователя
    function getDepositsByUser(address user) external view returns (Deposit[] memory) {
        uint256[] storage ids = _depositorDeposits[user];
        Deposit[] memory userDeposits = new Deposit[](ids.length);

        for (uint256 i = 0; i < ids.length; i++) {
            userDeposits[i] = deposits[ids[i]];
        }

        return userDeposits;
    }

    // Получить конкретный депозит
    function getDeposit(uint256 depositId) external view returns (Deposit memory) {
        return deposits[depositId];
    }
}
]]>
</file>
<file path="frontend\index.html">
<![CDATA[
<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Security DeFi System</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
]]>
</file>
<file path="frontend\package.json">
<![CDATA[
{
  "name": "defi-pool-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "ethers": "^5.7.2",
    "react-router-dom": "^6.8.0"
  },
  "devDependencies": {
    "@types/react": "^18.0.27",
    "@types/react-dom": "^18.0.10",
    "@vitejs/plugin-react": "^3.1.0",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.2.7",
    "vite": "^4.1.0"
  }
}
]]>
</file>
<file path="frontend\postcss.config.js">
<![CDATA[
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
]]>
</file>
<file path="frontend\src\App.jsx">
<![CDATA[
// frontend/src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Web3Provider, useWeb3 } from './context/Web3Context'; // Импортирован useWeb3
import Header from './components/Header';
import LandingPage from './components/LandingPage';
import Dashboard from './components/Dashboard';
import SwapPage from './components/SwapPage';
import BurnMintPage from './components/BurnMintPage'; // Новый компонент
import AdminPanel from './components/AdminPanel';
import PoolList from './components/PoolList';
import AddLiquidity from './components/AddLiquidity';
import Vault from './components/Vault';

// Компонент для защищенных маршрутов
const ProtectedRoute = ({ children }) => {
  const { isConnected } = useWeb3();
  if (!isConnected) {
    return <Navigate to="/" replace />;
  }
  return children;
};

// Компонент для админских маршрутов
const AdminRoute = ({ children }) => {
  const { isConnected, isAdmin } = useWeb3();
  if (!isConnected) {
    return <Navigate to="/" replace />;
  }
  if (!isAdmin) {
    return <Navigate to="/dashboard" replace />;
  }
  return children;
};

function App() {
  return (
    <Web3Provider>
      <Router>
        <div className="App">
          <Header />
          <Routes>
            <Route path="/" element={<LandingPage />} />
            <Route path="/dashboard" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />
            <Route path="/swap" element={<ProtectedRoute><SwapPage /></ProtectedRoute>} />
            <Route path="/burn-mint" element={<ProtectedRoute><BurnMintPage /></ProtectedRoute>} />
            <Route path="/pools" element={<ProtectedRoute><PoolList /></ProtectedRoute>} />
            <Route path="/vault" element={<ProtectedRoute><Vault /></ProtectedRoute>} />
            <Route path="/admin" element={<AdminRoute><AdminPanel /></AdminRoute>} />
          </Routes>
        </div>
      </Router>
    </Web3Provider>
  );
}

export default App;
]]>
</file>
<file path="frontend\src\components\AddLiquidity.jsx">
<![CDATA[
import React, { useState } from 'react';
import { useWeb3 } from '../context/Web3Context';

const AddLiquidity = ({ pool, onClose }) => {
  const { signer, account } = useWeb3();
  const [token0Amount, setToken0Amount] = useState('');
  const [token1Amount, setToken1Amount] = useState(''); // Исправлено: было setToken1mount
  const [lowerPrice, setLowerPrice] = useState('');
  const [upperPrice, setUpperPrice] = useState('');
  const [status, setStatus] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleAddLiquidity = async (e) => {
    e.preventDefault();
    if (!account) {
      alert("Пожалуйста, подключите кошелек");
      return;
    }
    if (!token0Amount || isNaN(token0Amount) || parseFloat(token0Amount) <= 0 ||
      !token1Amount || isNaN(token1Amount) || parseFloat(token1Amount) <= 0) {
      alert("Пожалуйста, введите корректные суммы токенов");
      return;
    }

    setIsSubmitting(true);
    setStatus('Добавление ликвидности...');

    // Здесь будет логика добавления ликвидности
    console.log("Добавление ликвидности:", {
      token0: pool.token0,
      token1: pool.token1,
      token0Amount,
      token1Amount,
      lowerPrice,
      upperPrice
    });

    // Имитация асинхронной операции
    setTimeout(() => {
      setStatus('Ликвидность успешно добавлена!');
      // Очищаем форму после успешного добавления
      setToken0Amount('');
      setToken1Amount(''); // Исправлено: было setToken1mount('')
      setLowerPrice('');
      setUpperPrice('');
      setIsSubmitting(false);
      // Закрытие модального окна через 1.5 секунды после успеха
      setTimeout(onClose, 1500);
    }, 2000); // Имитация задержки 2 секунды
    // alert("Функция добавления ликвидности будет реализована");
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
      <div className="bg-gray-800 rounded-xl shadow-2xl w-full max-w-md border border-gray-700 overflow-hidden">
        {/* Заголовок модального окна */}
        <div className="px-6 py-4 border-b border-gray-700 flex justify-between items-center">
          <h3 className="text-lg font-bold text-white">Добавить ликвидность</h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition"
            aria-label="Закрыть"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Содержимое формы */}
        <div className="px-6 py-5">
          <form onSubmit={handleAddLiquidity}>
            <div className="space-y-4">
              <div>
                <label htmlFor="token0Amount" className="block text-sm font-medium text-gray-300 mb-1">
                  Количество {pool.token0}
                </label>
                <input
                  type="number"
                  id="token0Amount"
                  value={token0Amount}
                  onChange={(e) => setToken0Amount(e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
                  placeholder="0.0"
                  step="any"
                  min="0"
                />
              </div>

              <div>
                <label htmlFor="token1Amount" className="block text-sm font-medium text-gray-300 mb-1">
                  Количество {pool.token1}
                </label>
                <input
                  type="number"
                  id="token1Amount"
                  value={token1Amount} // Исправлено: было token1mount
                  onChange={(e) => setToken1Amount(e.target.value)} // Исправлено: было setToken1mount
                  className="w-full px-3 py-2 bg-gray-700 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
                  placeholder="0.0"
                  step="any"
                  min="0"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label htmlFor="lowerPrice" className="block text-sm font-medium text-gray-300 mb-1">
                    Нижняя цена
                  </label>
                  <input
                    type="number"
                    id="lowerPrice"
                    value={lowerPrice}
                    onChange={(e) => setLowerPrice(e.target.value)}
                    className="w-full px-3 py-2 bg-gray-700 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
                    placeholder="0.0"
                    step="any"
                  />
                </div>
                <div>
                  <label htmlFor="upperPrice" className="block text-sm font-medium text-gray-300 mb-1">
                    Верхняя цена
                  </label>
                  <input
                    type="number"
                    id="upperPrice"
                    value={upperPrice}
                    onChange={(e) => setUpperPrice(e.target.value)}
                    className="w-full px-3 py-2 bg-gray-700 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
                    placeholder="0.0"
                    step="any"
                  />
                </div>
              </div>
            </div>

            <div className="mt-6">
              <button
                type="submit"
                disabled={isSubmitting}
                className={`w-full py-3 px-4 rounded-lg font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500 transition ${isSubmitting ? 'bg-gray-600 cursor-not-allowed' : 'bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600'}`}
              >
                {isSubmitting ? 'Обработка...' : 'Добавить ликвидность'}
              </button>
            </div>
          </form>

          {status && (
            <div className={`mt-4 text-center text-sm font-medium ${status.includes('успешно') ? 'text-green-400' : 'text-red-400'}`}>
              {status}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AddLiquidity;
]]>
</file>
<file path="frontend\src\components\AddLiquidityModal.jsx">
<![CDATA[
import React, { useState } from 'react';
import { useWeb3 } from '../context/Web3Context';

const AddLiquidityModal = ({ pool, onClose }) => {
  const { signer, account } = useWeb3();
  const [token0Amount, setToken0Amount] = useState('');
  const [token1Amount, setToken1Amount] = useState('');
  const [lowerPrice, setLowerPrice] = useState('');
  const [upperPrice, setUpperPrice] = useState('');
  const [status, setStatus] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleAddLiquidity = async (e) => {
    e.preventDefault();
    if (!account) {
      setStatus('Пожалуйста, подключите кошелек');
      return;
    }
    if (!token0Amount || !token1Amount) {
      setStatus('Пожалуйста, введите количество токенов');
      return;
    }
    if (parseFloat(token0Amount) <= 0 || parseFloat(token1Amount) <= 0) {
      setStatus('Количество токенов должно быть больше 0');
      return;
    }

    setIsSubmitting(true);
    setStatus('Добавление ликвидности...');
    // Здесь будет логика добавления ликвидности
    console.log("Добавление ликвидности:", { pool, token0Amount, token1Amount, lowerPrice, upperPrice });

    // Имитация асинхронной операции
    setTimeout(() => {
      setStatus('Ликвидность успешно добавлена!');
      // Очищаем форму после успешного добавления
      setToken0Amount('');
      setToken1Amount('');
      setLowerPrice('');
      setUpperPrice('');
      setIsSubmitting(false);
      // Закрытие модального окна через 1.5 секунды после успеха
      setTimeout(onClose, 1500);
    }, 2000); // Имитация задержки 2 секунды

    // alert("Функция добавления ликвидности будет реализована");
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
      <div className="bg-gray-800 rounded-xl shadow-2xl w-full max-w-md border border-gray-700 overflow-hidden">
        {/* Заголовок модального окна */}
        <div className="px-6 py-4 border-b border-gray-700 flex justify-between items-center bg-gray-800/50">
          <h3 className="text-lg font-bold text-cyan-400">
            Добавить ликвидность в пул <span className="text-white">{pool.token0}/{pool.token1}</span>
          </h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-500 rounded-full p-1"
            aria-label="Закрыть"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Содержимое формы */}
        <div className="px-6 py-5">
          <form onSubmit={handleAddLiquidity}>
            <div className="space-y-4">
              <div>
                <label htmlFor="token0Amount" className="block text-sm font-medium text-gray-300 mb-1">
                  Количество {pool.token0}
                </label>
                <input
                  type="number"
                  id="token0Amount"
                  value={token0Amount}
                  onChange={(e) => setToken0Amount(e.target.value)}
                  className="w-full px-4 py-2.5 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition duration-200"
                  placeholder="0.0"
                  step="any"
                  min="0"
                  required
                />
              </div>

              <div>
                <label htmlFor="token1Amount" className="block text-sm font-medium text-gray-300 mb-1">
                  Количество {pool.token1}
                </label>
                <input
                  type="number"
                  id="token1Amount"
                  value={token1Amount}
                  onChange={(e) => setToken1Amount(e.target.value)}
                  className="w-full px-4 py-2.5 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition duration-200"
                  placeholder="0.0"
                  step="any"
                  min="0"
                  required
                />
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label htmlFor="lowerPrice" className="block text-sm font-medium text-gray-300 mb-1">
                    Нижняя цена
                  </label>
                  <input
                    type="number"
                    id="lowerPrice"
                    value={lowerPrice}
                    onChange={(e) => setLowerPrice(e.target.value)}
                    className="w-full px-4 py-2.5 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition duration-200"
                    placeholder="0.0"
                    step="any"
                    min="0"
                  />
                </div>
                <div>
                  <label htmlFor="upperPrice" className="block text-sm font-medium text-gray-300 mb-1">
                    Верхняя цена
                  </label>
                  <input
                    type="number"
                    id="upperPrice"
                    value={upperPrice}
                    onChange={(e) => setUpperPrice(e.target.value)}
                    className="w-full px-4 py-2.5 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition duration-200"
                    placeholder="0.0"
                    step="any"
                    min="0"
                  />
                </div>
              </div>
            </div>

            {status && (
              <div className={`mt-4 text-sm text-center px-4 py-2 rounded-lg ${status.includes('успешно') ? 'bg-green-900/30 text-green-400 border border-green-800' : 'bg-yellow-900/30 text-yellow-400 border border-yellow-800'}`}>
                {status}
              </div>
            )}

            <div className="mt-6">
              <button
                type="submit"
                disabled={isSubmitting}
                className={`w-full py-3 px-4 rounded-lg font-semibold transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-cyan-500 ${isSubmitting ? 'bg-gray-600 cursor-not-allowed' : 'bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white shadow-lg hover:shadow-cyan-500/20'}`}
              >
                {isSubmitting ? (
                  <span className="flex items-center justify-center">
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Обработка...
                  </span>
                ) : (
                  'Добавить ликвидность'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AddLiquidityModal;
]]>
</file>
<file path="frontend\src\components\AdminPanel.jsx">
<![CDATA[
import React, { useState } from 'react';
import { useWeb3 } from '../context/Web3Context';

const AdminPanel = () => {
  const { signer, account, isAdmin } = useWeb3();
  const [status, setStatus] = useState('');

  // Получаем адреса из переменных окружения
  const factoryAddress = import.meta.env.VITE_FACTORY_ADDRESS || 'Не задан';
  const vaultAddress = import.meta.env.VITE_VAULT_ADDRESS || 'Не задан';
  const tokenAAddress = import.meta.env.VITE_TOKEN_A_ADDRESS || 'Не задан';
  const tokenBAddress = import.meta.env.VITE_TOKEN_B_ADDRESS || 'Не задан';

  // Функция для копирования текста в буфер обмена
  const copyToClipboard = async (text, label) => {
    try {
      await navigator.clipboard.writeText(text);
      setStatus(`${label} скопирован в буфер обмена`);
      // Очищаем статус через 2 секунды
      setTimeout(() => setStatus(''), 2000);
    } catch (err) {
      console.error('Ошибка при копировании: ', err);
      setStatus(`Не удалось скопировать ${label}`);
    }
  };

  // Функция для открытия ссылки на Polygonscan
  const openInPolygonscan = (address) => {
    if (address && address !== 'Не задан') {
      const url = `https://polygonscan.com/address/${address}`;
      window.open(url, '_blank');
    }
  };

  // Компонент для отображения адреса с кнопками
  const AddressDisplay = ({ address, label }) => (
    <div className="bg-gray-700 bg-opacity-30 p-4 rounded-lg">
      <h3 className="text-lg font-medium text-cyan-400 mb-1">{label}</h3>
      <div className="flex items-center justify-between">
        <p className="text-gray-300 break-words font-mono text-sm flex-grow mr-2">
          {address}
        </p>
        <div className="flex space-x-2 flex-shrink-0">
          <button
            onClick={() => copyToClipboard(address, label)}
            disabled={address === 'Не задан'}
            className={`p-2 rounded-lg transition ${address === 'Не задан'
                ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                : 'bg-gray-600 hover:bg-gray-500 text-white'
              }`}
            title="Скопировать адрес"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
          </button>
          <button
            onClick={() => openInPolygonscan(address)}
            disabled={address === 'Не задан'}
            className={`p-2 rounded-lg transition ${address === 'Не задан'
                ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                : 'bg-gray-600 hover:bg-gray-500 text-white'
              }`}
            title="Посмотреть на Polygonscan"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );

  // Здесь будут функции для выполнения админских действий
  const handleDeployFactory = async () => {
    setStatus('Деплой фабрики...');
    // Реализация деплоя фабрики
    console.log("Деплой фабрики");
    setStatus('Фабрика успешно задеплоена!');
  };

  const handleDeployVault = async () => {
    setStatus('Деплой хранилища...');
    // Реализация деплоя хранилища
    console.log("Деплой хранилища");
    setStatus('Хранилище успешно задеплоено!');
  };

  return (
    <div className="min-h-screen py-8 px-4 bg-gradient-to-br from-gray-900 to-indigo-900">
      <div className="container mx-auto">
        <div className="text-center mb-10">
          <h1 className="text-4xl font-bold text-white mb-2">Админка</h1>
          <p className="text-gray-400">Управление смарт-контрактами</p>
        </div>

        {/* Блок с уже развёрнутыми контрактами */}
        <div className="bg-gray-800 bg-opacity-50 p-6 rounded-xl backdrop-blur-sm border border-gray-700 mb-8">
          <h2 className="text-2xl font-semibold text-white mb-4">Развёрнутые контракты</h2>
          <div className="space-y-4">
            <AddressDisplay address={factoryAddress} label="Фабрика пулов" />
            <AddressDisplay address={vaultAddress} label="Хранилище токенов" />
            <AddressDisplay address={tokenAAddress} label="Токен A" />
            <AddressDisplay address={tokenBAddress} label="Токен B" />
          </div>
        </div>

        {/* Блок для деплоя новых контрактов (только для админов) */}
        {isAdmin && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-gray-700 bg-opacity-50 p-6 rounded-xl backdrop-blur-sm border border-gray-600">
              <h3 className="text-xl font-semibold text-white mb-4">Деплой фабрики</h3>
              <p className="text-gray-300 mb-4">Создать новый контракт фабрики пулов</p>
              <button
                onClick={handleDeployFactory}
                className="w-full px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-medium rounded-lg transition"
              >
                Задеплоить фабрику
              </button>
            </div>

            <div className="bg-gray-700 bg-opacity-50 p-6 rounded-xl backdrop-blur-sm border border-gray-600">
              <h3 className="text-xl font-semibold text-white mb-4">Деплой хранилища</h3>
              <p className="text-gray-300 mb-4">Создать новое хранилище токенов</p>
              <button
                onClick={handleDeployVault}
                className="w-full px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-medium rounded-lg transition"
              >
                Задеплоить хранилище
              </button>
            </div>
          </div>
        )}

        {/* Отображение статуса операций */}
        {status && (
          <div className="mt-6 p-4 bg-gray-800 bg-opacity-50 rounded-lg text-center">
            <p className="text-white">{status}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminPanel;
]]>
</file>
<file path="frontend\src\components\BurnMintPage.jsx">
<![CDATA[
import React, { useState } from 'react';
import { useWeb3 } from '../context/Web3Context';

const BurnMintPage = () => {
  const { signer, account } = useWeb3();
  const [action, setAction] = useState('mint'); // 'mint' или 'burn'
  const [token, setToken] = useState('TokenA');
  const [amount, setAmount] = useState('');
  const [tokenId, setTokenId] = useState(''); // Для бурна NFT

  const handleBurnMint = async (e) => {
    e.preventDefault();
    if (!account) {
      alert("Пожалуйста, подключите кошелек");
      return;
    }
    if (action === 'mint' && (!amount || parseFloat(amount) <= 0)) {
      alert("Введите корректную сумму для минта");
      return;
    }
    if (action === 'burn' && (!tokenId || parseInt(tokenId) < 0)) {
      alert("Введите корректный ID токена для бурна");
      return;
    }
    // Здесь будет логика минта/бурна токенов
    console.log("Операция:", {
      action,
      token,
      amount,
      tokenId
    });
    alert(`Функция ${action === 'mint' ? 'минта' : 'бурна'} токенов будет реализована`);
  };

  return (
    <div className="min-h-screen py-8 px-4 bg-gradient-to-br from-gray-900 to-indigo-900">
      <div className="container mx-auto">
        <div className="text-center mb-10">
          <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">Бурн и минт токенов</h1>
          <p className="text-lg text-gray-300">Создавайте или уничтожайте токены</p>
        </div>

        <div className="max-w-md mx-auto bg-gray-800 bg-opacity-50 rounded-2xl p-6 backdrop-blur-sm border border-gray-700 shadow-xl">
          <form onSubmit={handleBurnMint}>
            {/* Выбор действия: минт или бурн */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-300 mb-3">
                Выберите действие:
              </label>
              <div className="flex bg-gray-700 bg-opacity-50 rounded-lg p-1">
                <button
                  type="button"
                  onClick={() => setAction('mint')}
                  className={`flex-1 py-2 rounded-md text-sm font-medium transition-colors ${action === 'mint'
                    ? 'bg-gray-600 text-cyan-400 shadow'
                    : 'text-gray-300 hover:text-white'
                    }`}
                >
                  Минт токенов
                </button>
                <button
                  type="button"
                  onClick={() => setAction('burn')}
                  className={`flex-1 py-2 rounded-md text-sm font-medium transition-colors ${action === 'burn'
                    ? 'bg-gray-600 text-cyan-400 shadow'
                    : 'text-gray-300 hover:text-white'
                    }`}
                >
                  Бурн токенов
                </button>
              </div>
            </div>

            {/* Поля ввода в зависимости от действия */}
            {action === 'mint' ? (
              <>
                {/* Выбор токена для минта */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Токен для минта
                  </label>
                  <select
                    value={token}
                    onChange={(e) => setToken(e.target.value)}
                    className="w-full px-3 py-3 bg-gray-700 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
                  >
                    <option className="bg-gray-800" value="TokenA">TokenA</option>
                    <option className="bg-gray-800" value="TokenB">TokenB</option>
                    <option className="bg-gray-800" value="TokenC">TokenC</option>
                  </select>
                </div>

                {/* Количество для минта */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Количество
                  </label>
                  <input
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    className="w-full px-3 py-3 bg-gray-700 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
                    placeholder="0.0"
                    step="any"
                    min="0"
                  />
                </div>
              </>
            ) : (
              <>
                {/* ID токена для бурна */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    ID NFT токена для бурна
                  </label>
                  <input
                    type="number"
                    value={tokenId}
                    onChange={(e) => setTokenId(e.target.value)}
                    className="w-full px-3 py-3 bg-gray-700 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
                    placeholder="0"
                    step="1"
                    min="0"
                  />
                </div>
              </>
            )}

            {/* Информация о действии */}
            <div className="bg-gray-700 bg-opacity-30 rounded-lg p-3 mb-6 text-sm text-gray-400">
              {action === 'mint' ? (
                <p>Создание новых токенов {token} на ваш баланс</p>
              ) : (
                <p>Уничтожение NFT токена с ID {tokenId} из вашего кошелька</p>
              )}
            </div>

            {/* Кнопка выполнения */}
            <button
              type="submit"
              className="w-full py-3 px-4 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-medium rounded-lg transition shadow-lg"
            >
              {action === 'mint' ? 'Создать токены' : 'Уничтожить токен'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default BurnMintPage;
]]>
</file>
<file path="frontend\src\components\CreatePoolForm.jsx">
<![CDATA[
import React, { useState } from 'react';
import { useWeb3 } from '../context/Web3Context';

const CreatePoolForm = () => {
  const { signer, account } = useWeb3();
  const [token0, setToken0] = useState('');
  const [token1, setToken1] = useState('');
  const [feeRate, setFeeRate] = useState('30'); // 0.3% по умолчанию (вместо 5)
  const [status, setStatus] = useState('');

  const handleCreatePool = async (e) => {
    e.preventDefault();
    if (!account) {
      setStatus('Пожалуйста, подключите кошелек');
      return;
    }
    if (!token0 || !token1) {
      setStatus('Пожалуйста, введите адреса обоих токенов');
      return;
    }
    if (token0.toLowerCase() === token1.toLowerCase()) {
      setStatus('Адреса токенов должны быть разными');
      return;
    }

    setStatus('Создание пула...');
    // Здесь будет логика создания пула через фабрику
    console.log("Создание пула:", {
      token0,
      token1,
      feeRate
    });
    setStatus('Пул успешно создан!');
    // Очищаем форму после успешного создания
    setToken0('');
    setToken1('');
  };

  // Отображаем форму всем пользователям
  return (
    <div className="bg-gray-700 bg-opacity-50 p-6 rounded-xl backdrop-blur-sm border border-gray-600">
      <h3 className="text-xl font-semibold text-white mb-4">Создать новый пул</h3>
      <form onSubmit={handleCreatePool}>
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-300 mb-1">
            Адрес токена 1 (Token0)
          </label>
          <input
            type="text"
            value={token0}
            onChange={(e) => setToken0(e.target.value)}
            className="w-full px-3 py-2 bg-gray-600 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
            placeholder="0x..."
          />
        </div>
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-300 mb-1">
            Адрес токена 2 (Token1)
          </label>
          <input
            type="text"
            value={token1}
            onChange={(e) => setToken1(e.target.value)}
            className="w-full px-3 py-2 bg-gray-600 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
            placeholder="0x..."
          />
        </div>
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-300 mb-1">
            Комиссия (%)
          </label>
          <select
            value={feeRate}
            onChange={(e) => setFeeRate(e.target.value)}
            className="w-full px-3 py-2 bg-gray-600 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
          >
            {/* Убираем опцию 0.05% (value="5") */}
            <option className="bg-gray-800" value="30">0.3% (30)</option>
            <option className="bg-gray-800" value="100">1% (100)</option>
          </select>
        </div>
        <button
          type="submit"
          className="w-full py-2 px-4 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-medium rounded-lg transition"
        >
          Создать пул
        </button>
      </form>
      {status && (
        <div className="mt-4 p-3 bg-gray-600 bg-opacity-50 rounded-lg text-center">
          <p className="text-white">{status}</p>
        </div>
      )}
    </div>
  );
};

export default CreatePoolForm;
]]>
</file>
<file path="frontend\src\components\CreatePoolModal.jsx">
<![CDATA[
import React, { useState } from 'react';
import { useWeb3 } from '../context/Web3Context';

const CreatePoolModal = ({ onClose }) => {
  const { signer, account, isAdmin } = useWeb3();
  const [token0, setToken0] = useState('');
  const [token1, setToken1] = useState('');
  const [feeRate, setFeeRate] = useState('30'); // 0.3% по умолчанию
  const [status, setStatus] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleCreatePool = async (e) => {
    e.preventDefault();
    if (!signer || !account) {
      setStatus('Пожалуйста, подключите кошелек');
      return;
    }

    if (!isAdmin) {
      setStatus('Только администратор может создавать пулы');
      return;
    }

    if (!token0 || !token1) {
      setStatus('Пожалуйста, введите адреса токенов');
      return;
    }

    setIsLoading(true);
    setStatus('');

    try {
      // Импортируем ABI фабрики
      const factoryABI = [
        "function createPool(address token0, address token1, uint24 fee) returns (address)"
      ];

      // Адрес фабрики (замените на ваш реальный адрес)
      const factoryAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";

      // Создаем экземпляр контракта фабрики
      const factory = new ethers.Contract(factoryAddress, factoryABI, signer);

      // Вызываем функцию создания пула
      const tx = await factory.createPool(token0, token1, feeRate);
      setStatus(`Транзакция отправлена: ${tx.hash}`);

      // Ждем подтверждения
      const receipt = await tx.wait();
      setStatus(`Пул успешно создан! Хэш: ${receipt.transactionHash}`);

      // Очищаем форму
      setToken0('');
      setToken1('');
      setFeeRate('30');
    } catch (error) {
      console.error('Ошибка при создании пула:', error);
      setStatus(`Ошибка: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-2xl shadow-2xl w-full max-w-md border border-gray-700">
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-bold text-white">Создать пул</h2>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-white transition"
              disabled={isLoading}
            >
              ✕
            </button>
          </div>

          <form onSubmit={handleCreatePool}>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Адрес токена 1 (Token0)
              </label>
              <input
                type="text"
                value={token0}
                onChange={(e) => setToken0(e.target.value)}
                className="w-full px-3 py-2 bg-gray-600 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
                placeholder="0x..."
              />
            </div>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Адрес токена 2 (Token1)
              </label>
              <input
                type="text"
                value={token1}
                onChange={(e) => setToken1(e.target.value)}
                className="w-full px-3 py-2 bg-gray-600 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
                placeholder="0x..."
              />
            </div>

            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Комиссия (%)
              </label>
              <select
                value={feeRate}
                onChange={(e) => setFeeRate(e.target.value)}
                className="w-full px-3 py-2 bg-gray-600 bg-opacity-50 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
              >
                {/* Убираем опцию 0.05% (value="5") */}
                <option className="bg-gray-800" value="30">0.3%</option>
                <option className="bg-gray-800" value="100">1%</option>
              </select>
            </div>

            {status && (
              <div className={`text-sm p-2 rounded mb-4 ${status.includes('Ошибка') || status.includes('Пожалуйста')
                  ? 'bg-red-900 bg-opacity-50 text-red-300'
                  : 'bg-green-900 bg-opacity-50 text-green-300'
                }`}>
                {status}
              </div>
            )}

            <button
              type="submit"
              disabled={isLoading}
              className={`w-full py-2 px-4 bg-gradient-to-r from-cyan-500 to-blue-500 text-white font-medium rounded-lg transition ${isLoading
                  ? 'opacity-50 cursor-not-allowed'
                  : 'hover:from-cyan-600 hover:to-blue-600'
                }`}
            >
              {isLoading ? 'Создание...' : 'Создать пул'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default CreatePoolModal;
]]>
</file>
<file path="frontend\src\components\Dashboard.jsx">
<![CDATA[
import React, { useState } from 'react';
import WalletTokens from './WalletTokens';
import PoolsList from './PoolsList';
import TokenVault from './TokenVault';
import CreatePoolModal from './CreatePoolModal';

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState('portfolio'); // Устанавливаем 'portfolio' как активную вкладку по умолчанию
  const [isModalOpen, setIsModalOpen] = useState(false);

  const openCreatePoolModal = () => {
    setIsModalOpen(true);
  };

  const closeCreatePoolModal = () => {
    setIsModalOpen(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-indigo-900 text-white">
      <div className="container mx-auto py-8 px-4">
        {/* Навигация по вкладкам */}
        <div className="mb-8">
          <div className="flex flex-wrap gap-2 border-b border-gray-700">
            {/* Вкладка "Портфолио" */}
            <button
              onClick={() => setActiveTab('portfolio')}
              className={`px-4 py-2 font-medium rounded-t-lg transition-colors duration-200 ${activeTab === 'portfolio' ? 'bg-gray-800 text-cyan-400 border-b-2 border-cyan-400' : 'text-gray-400 hover:text-white hover:bg-gray-800/30'}`}
            >
              Портфолио
            </button>
            {/* Вкладка "Пулы ликвидности" */}
            <button
              onClick={() => setActiveTab('pools')}
              className={`px-4 py-2 font-medium rounded-t-lg transition-colors duration-200 ${activeTab === 'pools' ? 'bg-gray-800 text-cyan-400 border-b-2 border-cyan-400' : 'text-gray-400 hover:text-white hover:bg-gray-800/30'}`}
            >
              Пулы ликвидности
            </button>
            {/* Вкладка "Хранилище токенов" */}
            <button
              onClick={() => setActiveTab('vault')}
              className={`px-4 py-2 font-medium rounded-t-lg transition-colors duration-200 ${activeTab === 'vault' ? 'bg-gray-800 text-cyan-400 border-b-2 border-cyan-400' : 'text-gray-400 hover:text-white hover:bg-gray-800/30'}`}
            >
              Хранилище токенов
            </button>
          </div>
        </div>

        {/* Контент вкладок */}
        {activeTab === 'portfolio' && <WalletTokens />}
        {activeTab === 'pools' && (
          <div>
            <PoolsList openCreatePoolModal={openCreatePoolModal} />
          </div>
        )}
        {activeTab === 'vault' && <TokenVault />}

        {isModalOpen && <CreatePoolModal onClose={closeCreatePoolModal} />}
      </div>
    </div>
  );
};

export default Dashboard;
]]>
</file>
<file path="frontend\src\components\Header.jsx">
<![CDATA[
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useWeb3 } from '../context/Web3Context';

const Header = () => {
  const { account, isConnected, isAdmin, connectWallet, disconnectWallet, error } = useWeb3();
  const location = useLocation();

  const getShortAddress = (address) => {
    if (!address) return '';
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
  };

  return (
    <header className="bg-gray-900 bg-opacity-80 backdrop-blur-sm border-b border-gray-800">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          <div className="flex items-center space-x-8">
            <Link to="/" className="text-xl font-bold text-cyan-400">
              DeFi Pool
            </Link>
            {isConnected && (
              <nav className="hidden md:flex space-x-4">
                <Link
                  to="/"
                  className={`px-3 py-2 rounded-md text-sm font-medium ${location.pathname === '/'
                    ? 'bg-gray-800 text-white'
                    : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                    }`}
                >
                  Главная
                </Link>
                <Link
                  to="/dashboard"
                  className={`px-3 py-2 rounded-md text-sm font-medium ${location.pathname === '/dashboard'
                    ? 'bg-gray-800 text-white'
                    : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                    }`}
                >
                  Дашборд
                </Link>
                <Link
                  to="/swap"
                  className={`px-3 py-2 rounded-md text-sm font-medium ${location.pathname === '/swap'
                    ? 'bg-gray-800 text-white'
                    : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                    }`}
                >
                  Обмен
                </Link>
                {/* Новый пункт меню "Бурн и минт" */}
                <Link
                  to="/burn-mint"
                  className={`px-3 py-2 rounded-md text-sm font-medium ${location.pathname === '/burn-mint'
                    ? 'bg-gray-800 text-white'
                    : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                    }`}
                >
                  Бурн и минт
                </Link>
                {isAdmin && (
                  <Link
                    to="/admin"
                    className={`px-3 py-2 rounded-md text-sm font-medium ${location.pathname === '/admin'
                      ? 'bg-gray-800 text-white'
                      : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                      }`}
                  >
                    Админка
                  </Link>
                )}
              </nav>
            )}
          </div>
          <div className="flex items-center">
            {error && (
              <div className="hidden md:block mr-4 text-sm text-red-400 bg-red-900 bg-opacity-50 px-3 py-1 rounded">
                Ошибка: {error}
              </div>
            )}
            {isConnected ? (
              <div className="flex items-center space-x-4">
                {isAdmin && (
                  <span className="hidden sm:inline-block text-xs font-medium bg-amber-900 text-amber-300 px-2 py-1 rounded">
                    Админ
                  </span>
                )}
                <span className="hidden sm:inline-block text-sm font-medium text-gray-300">
                  {getShortAddress(account)}
                </span>
                <button
                  onClick={disconnectWallet}
                  className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white text-sm font-medium rounded-lg transition"
                >
                  Отключить
                </button>
              </div>
            ) : (
              <button
                onClick={connectWallet}
                className="px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white text-sm font-medium rounded-lg transition"
              >
                Подключить кошелек
              </button>
            )}
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header;
]]>
</file>
<file path="frontend\src\components\LandingPage.jsx">
<![CDATA[
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useWeb3 } from '../context/Web3Context';

const LandingPage = () => {
  const { connectWallet, isConnected, error } = useWeb3();
  const navigate = useNavigate();

  const handleConnect = async () => {
    await connectWallet();
    // После подключения перенаправляем на дашборд
    if (isConnected) {
      navigate('/dashboard');
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center px-4 py-12 sm:px-6 lg:px-8 bg-gradient-to-br from-gray-900 to-indigo-900 text-white">
      <div className="max-w-3xl w-full text-center">
        <h1 className="text-4xl md:text-6xl font-extrabold tracking-tight mb-6">
          <span className="block">DeFi</span>
          <span className="block bg-clip-text text-transparent bg-gradient-to-r from-cyan-400 to-blue-500">
            Pool System
          </span>
        </h1>

        <p className="mt-6 text-xl text-gray-300 max-w-2xl mx-auto">
          Создавайте пулы ликвидности, обменивайте токены и безопасно храните активы в децентрализованной финансовой системе.
        </p>

        <div className="mt-10 grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-gray-800 bg-opacity-50 p-6 rounded-xl backdrop-blur-sm border border-gray-700">
            <div className="text-cyan-400 text-3xl mb-3">🔒</div>
            <h3 className="text-lg font-semibold mb-2">Безопасность</h3>
            <p className="text-gray-400">Ваши средства защищены смарт-контрактами и NFT-позициями.</p>
          </div>

          <div className="bg-gray-800 bg-opacity-50 p-6 rounded-xl backdrop-blur-sm border border-gray-700">
            <div className="text-green-400 text-3xl mb-3">💧</div>
            <h3 className="text-lg font-semibold mb-2">Ликвидность</h3>
            <p className="text-gray-400">Добавляйте ликвидность и получайте комиссионные от обменов.</p>
          </div>

          <div className="bg-gray-800 bg-opacity-50 p-6 rounded-xl backdrop-blur-sm border border-gray-700">
            <div className="text-purple-400 text-3xl mb-3">📊</div>
            <h3 className="text-lg font-semibold mb-2">Контроль</h3>
            <p className="text-gray-400">Полный контроль над своими активами и позициями.</p>
          </div>
        </div>

        <div className="mt-12">
          {error && (
            <div className="mb-4 p-3 bg-red-900 text-red-200 rounded-lg">
              {error}
            </div>
          )}
          <button
            onClick={handleConnect}
            className="px-8 py-4 bg-gradient-to-r from-cyan-500 to-blue-500 text-white font-bold rounded-full shadow-lg hover:from-cyan-600 hover:to-blue-600 transition-all transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500 focus:ring-offset-gray-900"
          >
            {isConnected ? 'Перейти в дашборд' : 'Подключить MetaMask'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default LandingPage;
]]>
</file>
<file path="frontend\src\components\PoolList.jsx">
<![CDATA[
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useWeb3 } from '../context/Web3Context';
import AddLiquidityModal from './AddLiquidityModal'; // Импортируем модальное окно

const PoolList = () => {
  const { provider } = useWeb3();
  const navigate = useNavigate();
  const [pools, setPools] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false); // Состояние для модального окна
  const [selectedPool, setSelectedPool] = useState(null); // Выбранный пул

  // Здесь будет логика получения списка пулов
  // Пока что показываем заглушку
  useEffect(() => {
    if (provider) {
      // Получение списка пулов с фабрики
      // Это пример, вам нужно будет реализовать реальную логику
      setPools([
        { id: 1, token0: "TokenA", token1: "TokenB", fee: "0.3%" },
        { id: 2, token0: "TokenC", token1: "TokenD", fee: "1%" }
      ]);
    }
  }, [provider]);

  // Функция для открытия модального окна
  const openAddLiquidityModal = (pool) => {
    setSelectedPool(pool);
    setIsModalOpen(true);
  };

  // Функция для закрытия модального окна
  const closeAddLiquidityModal = () => {
    setIsModalOpen(false);
    setSelectedPool(null);
  };

  // Функция для перехода на страницу обмена
  const handleSwapClick = () => {
    navigate('/swap');
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h2 className="text-xl font-bold mb-4">Список пулов</h2>
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Токен 1
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Токен 2
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Комиссия
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Действия
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {pools.map((pool) => (
              <tr key={pool.id}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{pool.token0}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{pool.token1}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{pool.fee}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm">
                  {/* Кнопка "Добавить ликвидность" теперь открывает модальное окно */}
                  <button
                    onClick={() => openAddLiquidityModal(pool)}
                    className="text-indigo-600 hover:text-indigo-900 mr-3"
                  >
                    Добавить ликвидность
                  </button>
                  <button
                    onClick={handleSwapClick}
                    className="text-green-600 hover:text-green-900"
                  >
                    Обменять
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Модальное окно добавления ликвидности */}
      {isModalOpen && selectedPool && (
        <AddLiquidityModal
          pool={selectedPool}
          onClose={closeAddLiquidityModal}
        />
      )}
    </div>
  );
};

export default PoolList;
]]>
</file>
<file path="frontend\src\components\PoolsList.jsx">
<![CDATA[
import React, { useState, useEffect } from 'react';
import { useWeb3 } from '../context/Web3Context';
import AddLiquidityModal from './AddLiquidityModal';
import CreatePoolModal from './CreatePoolModal'; // Импортируем модальное окно создания пула
import { ethers } from 'ethers';

const PoolsList = () => {
  const { provider, account, isAdmin } = useWeb3();
  const [pools, setPools] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isCreatePoolModalOpen, setIsCreatePoolModalOpen] = useState(false); // Состояние для модального окна создания пула
  const [selectedPool, setSelectedPool] = useState(null);

  // Функция для получения пулов с фабрики
  const fetchPools = async () => {
    if (!provider) {
      setPools([]);
      return;
    }
    setLoading(true);
    setError(null);
    try {
      // TODO: Замените на реальный адрес фабрики и ABI
      const factoryAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
      const factoryABI = ["function getPools() view returns (address[])"];
      const factory = new ethers.Contract(factoryAddress, factoryABI, provider);

      // TODO: Получите адреса пулов и информацию о каждом пуле (токены, комиссия)
      // Это заглушка, замените на реальную логику
      const poolAddresses = await factory.getPools();
      console.log("Полученные адреса пулов:", poolAddresses);

      // Пример данных, замените на данные из реальных контрактов
      const mockPools = [
        { id: 1, token0: "TokenA", token1: "TokenB", fee: "0.3%", address: "0x..." },
        { id: 2, token0: "TokenC", token1: "TokenD", fee: "1%", address: "0x..." },
        // Добавьте больше пулов по мере необходимости
      ];
      setPools(mockPools);
    } catch (err) {
      console.error("Ошибка при получении пулов:", err);
      setError(`Не удалось получить список пулов: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPools();
  }, [provider]);

  const openAddLiquidityModal = (pool) => {
    setSelectedPool(pool);
    setIsModalOpen(true);
  };

  const closeAddLiquidityModal = () => {
    setIsModalOpen(false);
    setSelectedPool(null);
  };

  // Функции для открытия/закрытия модального окна создания пула
  const openCreatePoolModal = () => {
    setIsCreatePoolModalOpen(true);
  };

  const closeCreatePoolModal = () => {
    setIsCreatePoolModalOpen(false);
  };

  const handleSwapClick = (pool) => {
    console.log("Обменять в пуле:", pool);
    alert(`Функция обмена для пула ${pool.token0}/${pool.token1} будет реализована`);
  };

  return (
    <div className="min-h-screen py-8 px-4 bg-gradient-to-br from-gray-900 to-indigo-900 text-white">
      <div className="container mx-auto">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-8">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold">Пулы ликвидности</h1>
            <p className="mt-2 text-gray-400">Управляйте своими позициями в пулах ликвидности</p>
          </div>
          {/* Кнопка "Создать пул" для всех пользователей */}
          <button
            onClick={openCreatePoolModal}
            className="mt-4 md:mt-0 px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-medium rounded-lg transition shadow-lg"
          >
            Создать пул
          </button>
        </div>

        {error && (
          <div className="bg-red-900/30 border border-red-700 text-red-300 px-4 py-3 rounded mb-6">
            <strong>Ошибка:</strong> {error}
          </div>
        )}

        {loading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cyan-500"></div>
          </div>
        ) : pools.length === 0 ? (
          <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-xl p-8 text-center">
            <p className="text-xl text-gray-400">Пулы не найдены</p>
            <p className="mt-2 text-gray-500">Станьте первым, кто создаст пул!</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {pools.map((pool) => (
              <div key={pool.id} className="bg-gray-800/90 backdrop-blur-sm border border-gray-700 rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300">
                <div className="p-5">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="text-xl font-bold text-white">{pool.token0}/{pool.token1}</h3>
                      <p className="text-cyan-400 font-medium">{pool.fee} комиссия</p>
                    </div>
                  </div>

                  <div className="mt-6 flex space-x-3">
                    <button
                      onClick={() => openAddLiquidityModal(pool)}
                      className="flex-1 bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white font-medium py-2 px-4 rounded-lg transition duration-300 ease-in-out transform hover:-translate-y-0.5 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-opacity-50"
                    >
                      Добавить
                    </button>
                    <button
                      onClick={() => handleSwapClick(pool)}
                      className="flex-1 bg-gray-700 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-lg transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50"
                    >
                      Обменять
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Модальное окно добавления ликвидности */}
        {isModalOpen && selectedPool && (
          <AddLiquidityModal
            pool={selectedPool}
            onClose={closeAddLiquidityModal}
          />
        )}

        {/* Модальное окно создания пула */}
        {isCreatePoolModalOpen && (
          <CreatePoolModal
            onClose={closeCreatePoolModal}
          />
        )}
      </div>
    </div>
  );
};

export default PoolsList;
]]>
</file>
<file path="frontend\src\components\SwapPage.jsx">
<![CDATA[
import React, { useState } from 'react';
import { useWeb3 } from '../context/Web3Context';

const SwapPage = () => {
  const { signer, account } = useWeb3();
  const [fromToken, setFromToken] = useState('TokenA');
  const [toToken, setToToken] = useState('TokenB');
  const [amount, setAmount] = useState('');
  const [estimatedAmount, setEstimatedAmount] = useState('0.0');

  // Функция для расчета примерного выходного количества (заглушка)
  const calculateEstimatedAmount = (inputAmount, from, to) => {
    // В реальной реализации здесь будет логика расчета на основе резервов пула
    // Пока используем фиктивный курс 1:1 для демонстрации
    return inputAmount || '0.0';
  };

  // Обновляем оценку при изменении входных данных
  React.useEffect(() => {
    setEstimatedAmount(calculateEstimatedAmount(amount, fromToken, toToken));
  }, [amount, fromToken, toToken]);

  const handleSwap = async (e) => {
    e.preventDefault();
    if (!account) {
      alert("Пожалуйста, подключите кошелек");
      return;
    }
    if (!amount || parseFloat(amount) <= 0) {
      alert("Введите корректную сумму");
      return;
    }
    // Здесь будет логика обмена токенов
    console.log("Обмен токенов:", {
      fromToken,
      toToken,
      amount
    });
    alert("Функция обмена токенов будет реализована");
  };

  const switchTokens = () => {
    setFromToken(toToken);
    setToToken(fromToken);
    // Также меняем сумму для реалистичности, хотя в реальном приложении это требует перерасчета
    setAmount('');
    setEstimatedAmount('0.0');
  };

  return (
    <div className="min-h-screen py-8 px-4 bg-gradient-to-br from-gray-900 to-indigo-900">
      <div className="container mx-auto">
        <div className="text-center mb-10">
          <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">Обмен токенов</h1>
          <p className="text-lg text-gray-300">Быстро обменивайте токены по лучшим курсам</p>
        </div>

        <div className="max-w-md mx-auto bg-gray-800 bg-opacity-50 rounded-2xl p-6 backdrop-blur-sm border border-gray-700 shadow-xl">
          <form onSubmit={handleSwap}>
            {/* Поле "От" */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-300 mb-1">
                От
              </label>
              <div className="flex bg-gray-700 bg-opacity-50 rounded-lg overflow-hidden">
                <select
                  value={fromToken}
                  onChange={(e) => setFromToken(e.target.value)}
                  className="w-1/3 px-3 py-3 bg-transparent text-white focus:outline-none"
                >
                  <option className="bg-gray-800" value="TokenA">TokenA</option>
                  <option className="bg-gray-800" value="TokenB">TokenB</option>
                  <option className="bg-gray-800" value="TokenC">TokenC</option>
                </select>
                <input
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                  className="w-2/3 px-3 py-3 bg-transparent text-white placeholder-gray-500 focus:outline-none"
                  placeholder="0.0"
                  step="any"
                  min="0"
                />
              </div>
            </div>

            {/* Кнопка переключения токенов */}
            <div className="flex justify-center my-2">
              <button
                type="button"
                onClick={switchTokens}
                className="p-2 rounded-full bg-gray-700 hover:bg-gray-600 text-gray-300 transition-colors"
                aria-label="Switch tokens"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z" clipRule="evenodd" />
                </svg>
              </button>
            </div>

            {/* Поле "К" */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-300 mb-1">
                К
              </label>
              <div className="flex bg-gray-700 bg-opacity-50 rounded-lg overflow-hidden">
                <select
                  value={toToken}
                  onChange={(e) => setToToken(e.target.value)}
                  className="w-1/3 px-3 py-3 bg-transparent text-white focus:outline-none"
                >
                  <option className="bg-gray-800" value="TokenA">TokenA</option>
                  <option className="bg-gray-800" value="TokenB">TokenB</option>
                  <option className="bg-gray-800" value="TokenC">TokenC</option>
                </select>
                <input
                  type="text"
                  value={estimatedAmount}
                  readOnly
                  className="w-2/3 px-3 py-3 bg-transparent text-white placeholder-gray-500 focus:outline-none"
                  placeholder="0.0"
                />
              </div>
            </div>

            {/* Информация о курсе и комиссии */}
            <div className="bg-gray-700 bg-opacity-30 rounded-lg p-3 mb-6 text-sm text-gray-400">
              <div className="flex justify-between py-1">
                <span>Курс:</span>
                <span>1 {fromToken} = 1 {toToken}</span>
              </div>
              <div className="flex justify-between py-1">
                <span>Комиссия:</span>
                <span>0.3%</span>
              </div>
              <div className="flex justify-between py-1 font-medium text-gray-300">
                <span>Вы получите:</span>
                <span>{estimatedAmount} {toToken}</span>
              </div>
            </div>

            {/* Кнопка обмена */}
            <button
              type="submit"
              className="w-full py-3 px-4 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-medium rounded-lg transition shadow-lg"
            >
              Обменять
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default SwapPage;
]]>
</file>
<file path="frontend\src\components\SwapTokens.jsx">
<![CDATA[
import React, { useState } from 'react';
import { useWeb3 } from '../context/Web3Context';

const SwapTokens = () => {
  const { signer, account } = useWeb3();
  const [fromToken, setFromToken] = useState('TokenA');
  const [toToken, setToToken] = useState('TokenB');
  const [amount, setAmount] = useState('');

  const handleSwap = async (e) => {
    e.preventDefault();
    // Здесь будет логика обмена токенов
    console.log("Обмен токенов:", {
      fromToken,
      toToken,
      amount
    });
    alert("Функция обмена токенов будет реализована");
  };

  const switchTokens = () => {
    setFromToken(toToken);
    setToToken(fromToken);
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h2 className="text-xl font-bold mb-4">Обмен токенов</h2>
      <form onSubmit={handleSwap}>
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            От
          </label>
          <div className="flex">
            <select
              value={fromToken}
              onChange={(e) => setFromToken(e.target.value)}
              className="w-1/3 px-3 py-2 border border-gray-300 rounded-l-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="TokenA">TokenA</option>
              <option value="TokenB">TokenB</option>
              <option value="TokenC">TokenC</option>
            </select>
            <input
              type="number"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              className="w-2/3 px-3 py-2 border-t border-b border-gray-300 shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="0.0"
            />
          </div>
        </div>

        <div className="flex justify-center my-2">
          <button
            type="button"
            onClick={switchTokens}
            className="p-2 rounded-full bg-gray-200 hover:bg-gray-300"
          >
            ↓↑
          </button>
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            К
          </label>
          <div className="flex">
            <select
              value={toToken}
              onChange={(e) => setToToken(e.target.value)}
              className="w-1/3 px-3 py-2 border border-gray-300 rounded-l-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="TokenA">TokenA</option>
              <option value="TokenB">TokenB</option>
              <option value="TokenC">TokenC</option>
            </select>
            <input
              type="number"
              value=""
              readOnly
              className="w-2/3 px-3 py-2 border-t border-b border-gray-300 bg-gray-100 shadow-sm"
              placeholder="0.0"
            />
          </div>
        </div>

        <button
          type="submit"
          className="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          Обменять
        </button>
      </form>
    </div>
  );
};

export default SwapTokens;
]]>
</file>
<file path="frontend\src\components\TokenVault.jsx">
<![CDATA[
import React, { useState, useEffect } from 'react';
import { useWeb3 } from '../context/Web3Context';
import { ethers } from 'ethers';

const TokenVault = () => {
  const { provider, signer, account } = useWeb3();
  const [deposits, setDeposits] = useState([]);
  const [tokens, setTokens] = useState([]); // Предполагается, что токены передаются или получены
  const [selectedToken, setSelectedToken] = useState('');
  const [amount, setAmount] = useState('');
  const [status, setStatus] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Здесь будет логика получения депозитов
  // Пока что показываем заглушку
  useEffect(() => {
    if (account) {
      // Получение списка депозитов пользователя
      // Это пример, вам нужно будет реализовать реальную логику
      setDeposits([
        { id: 1, token: "TokenA", amount: "10.5" },
        { id: 2, token: "TokenB", amount: "5.2" }
      ]);
    }
  }, [account]);

  const handleDeposit = async (e) => {
    e.preventDefault();
    if (!account) {
      setStatus('Пожалуйста, подключите кошелек');
      return;
    }
    if (!selectedToken || !amount) {
      setStatus('Пожалуйста, выберите токен и введите сумму');
      return;
    }
    if (parseFloat(amount) <= 0) {
      setStatus('Сумма должна быть больше 0');
      return;
    }

    setIsSubmitting(true);
    setStatus('Выполняется депозит...');
    // Здесь будет логика депозита токенов
    console.log("Депозит токенов:", { selectedToken, amount });
    // alert("Функция депозита будет реализована");

    // Имитация асинхронной операции
    setTimeout(() => {
      setStatus('Депозит успешно выполнен!');
      setAmount('');
      setIsSubmitting(false);
      // Обновить список депозитов
      setDeposits(prev => [...prev, { id: prev.length + 1, token: selectedToken, amount }]);
    }, 2000); // Имитация задержки 2 секунды
  };

  const handleWithdraw = async (depositId) => {
    if (!account) {
      alert("Пожалуйста, подключите кошелек");
      return;
    }
    // Здесь будет логика вывода токенов
    console.log("Вывод токенов:", depositId);
    alert("Функция вывода будет реализована");
  };

  return (
    <div className="min-h-screen py-8 px-4 bg-gradient-to-br from-gray-900 to-indigo-900 text-white">
      <div className="container mx-auto">
        <h1 className="text-3xl md:text-4xl font-bold mb-2">Хранилище токенов</h1>
        <p className="mb-8 text-gray-400">Безопасно храните и управляйте своими токенами</p>

        {/* Секция депозита */}
        <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-xl p-6 mb-8 shadow-lg">
          <h2 className="text-xl font-bold text-cyan-400 mb-4">Депозит токенов</h2>
          <form onSubmit={handleDeposit} className="space-y-4">
            <div className="flex flex-col sm:flex-row gap-4">
              <select
                value={selectedToken}
                onChange={(e) => setSelectedToken(e.target.value)}
                className="flex-1 px-4 py-2.5 bg-gray-700/50 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition duration-200"
                required
              >
                <option value="">Выберите токен</option>
                {/* Предполагается, что список токенов доступен */}
                <option value="TokenA">TokenA</option>
                <option value="TokenB">TokenB</option>
                <option value="TokenC">TokenC</option>
              </select>
              <input
                type="number"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                className="flex-1 px-4 py-2.5 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition duration-200"
                placeholder="Сумма"
                step="any"
                min="0"
                required
              />
            </div>
            {status && (
              <div className={`text-sm px-4 py-2 rounded-lg ${status.includes('успешно') ? 'bg-green-900/30 text-green-400 border border-green-800' : status.includes('Пожалуйста') ? 'bg-blue-900/30 text-blue-400 border border-blue-800' : 'bg-yellow-900/30 text-yellow-400 border border-yellow-800'}`}>
                {status}
              </div>
            )}
            <button
              type="submit"
              disabled={isSubmitting}
              className={`py-2.5 px-5 rounded-lg font-medium transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-cyan-500 ${isSubmitting ? 'bg-gray-600 cursor-not-allowed' : 'bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white shadow-lg hover:shadow-cyan-500/20'}`}
            >
              {isSubmitting ? 'Обработка...' : 'Депонировать'}
            </button>
          </form>
        </div>

        {/* Секция списка депозитов */}
        <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-xl p-6 shadow-lg overflow-hidden">
          <h2 className="text-xl font-bold text-cyan-400 mb-4">Мои депозиты</h2>
          {deposits.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
              <p className="mt-2">У вас пока нет активных депозитов</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-700">
                <thead className="bg-gray-700/30">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">ID</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Токен</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Сумма</th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider">Действия</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-700">
                  {deposits.map((deposit) => (
                    <tr key={deposit.id} className="hover:bg-gray-700/30 transition-colors duration-200">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-300">{deposit.id}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{deposit.token}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{deposit.amount}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          onClick={() => handleWithdraw(deposit.id)}
                          className="text-cyan-400 hover:text-cyan-300 transition-colors duration-200 px-3 py-1 rounded focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-opacity-50"
                        >
                          Вывести
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TokenVault;
]]>
</file>
<file path="frontend\src\components\Vault.jsx">
<![CDATA[
import React, { useState, useEffect } from 'react';
import { useWeb3 } from '../context/Web3Context';

const Vault = () => {
  const { signer, account } = useWeb3();
  const [deposits, setDeposits] = useState([]);
  const [selectedToken, setSelectedToken] = useState('TokenA');
  const [amount, setAmount] = useState(''); // Исправлено: было setTokenAmount
  const [status, setStatus] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Здесь будет логика получения депозитов
  // Пока что показываем заглушку
  useEffect(() => {
    if (account) {
      // Получение списка депозитов пользователя
      // Это пример, вам нужно будет реализовать реальную логику
      setDeposits([
        { id: 1, token: 'TokenA', amount: '100' },
        { id: 2, token: 'TokenB', amount: '50' }
      ]);
    }
  }, [account]);

  const handleDeposit = async (e) => {
    e.preventDefault();
    if (!account) {
      alert("Пожалуйста, подключите кошелек");
      return;
    }
    if (!amount || isNaN(amount) || parseFloat(amount) <= 0) {
      alert("Пожалуйста, введите корректную сумму");
      return;
    }

    setIsSubmitting(true);
    setStatus('Выполняется депозит...');

    // Здесь будет логика взаимодействия со смарт-контрактом
    console.log("Депозит токенов:", { selectedToken, amount });

    // Имитация асинхронной операции
    setTimeout(() => {
      setStatus('Депозит успешно выполнен!');
      setAmount(''); // Исправлено: было setTokenAmount('')
      setIsSubmitting(false);
      // Обновить список депозитов
      setDeposits(prev => [...prev, { id: prev.length + 1, token: selectedToken, amount }]);
    }, 2000); // Имитация задержки 2 секунды
  };

  const handleWithdraw = async (depositId) => {
    if (!account) {
      alert("Пожалуйста, подключите кошелек");
      return;
    }

    // Здесь будет логика вывода токенов
    console.log("Вывод токенов:", depositId);
    alert("Функция вывода будет реализована");
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h2 className="text-xl font-bold mb-4">Хранилище токенов</h2>

      {/* Форма депозита */}
      <div className="mb-8">
        <h3 className="text-lg font-medium mb-3">Внести токены</h3>
        <form onSubmit={handleDeposit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="tokenSelect" className="block text-sm font-medium text-gray-700 mb-1">Выберите токен</label>
              <select
                id="tokenSelect"
                value={selectedToken}
                onChange={(e) => setSelectedToken(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              >
                <option value="TokenA">TokenA</option>
                <option value="TokenB">TokenB</option>
                <option value="TokenC">TokenC</option>
              </select>
            </div>
            <div>
              <label htmlFor="amountInput" className="block text-sm font-medium text-gray-700 mb-1">Количество</label>
              <input
                type="number"
                id="amountInput"
                value={amount} // Исправлено: было tokenAmount
                onChange={(e) => setAmount(e.target.value)} // Исправлено: было setTokenAmount
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="0.0"
                step="any"
                min="0"
              />
            </div>
          </div>
          <button
            type="submit"
            disabled={isSubmitting}
            className={`w-full py-2 px-4 rounded-md text-white font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${isSubmitting ? 'bg-gray-400 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700'}`}
          >
            {isSubmitting ? 'Обработка...' : 'Внести токены'}
          </button>
        </form>
        {status && (
          <div className="mt-4 text-center text-sm font-medium text-green-600">
            {status}
          </div>
        )}
      </div>

      {/* Список депозитов */}
      <div>
        <h3 className="text-lg font-medium mb-3">Ваши депозиты</h3>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Токен</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Количество</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Действия</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {deposits.length > 0 ? deposits.map((deposit) => (
                <tr key={deposit.id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{deposit.id}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{deposit.token}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{deposit.amount}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm">
                    <button
                      onClick={() => handleWithdraw(deposit.id)}
                      className="text-red-600 hover:text-red-900"
                    >
                      Вывести
                    </button>
                  </td>
                </tr>
              )) : (
                <tr>
                  <td colSpan="4" className="px-6 py-4 text-center text-sm text-gray-500">
                    Депозиты не найдены
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Vault;
]]>
</file>
<file path="frontend\src\components\WalletTokens.jsx">
<![CDATA[
import React, { useEffect, useState } from 'react';
import { useWeb3 } from '../context/Web3Context';
import { ethers } from 'ethers';

// ABI для ERC20 токенов (минимальный набор функций для получения метаданных)
const ERC20_ABI = [
  "function decimals() view returns (uint8)",
  "function symbol() view returns (string)",
  "function name() view returns (string)",
  "function balanceOf(address owner) view returns (uint256)"
];

// Карта адресов токенов Polygon в CoinGecko ID
// Исправлен ID для POL (ранее MATIC)
const TOKEN_ADDRESS_TO_COINGECKO_ID = {
  '0x0000000000000000000000000000000000000000': 'polygon-ecosystem-token', // POL
  '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619': 'weth', // WETH
  '0x2791bca1f2de4661ed88a30c99a7a9449aa84174': 'usd-coin', // USDC
  '0xc2132d05d31c914a87c6611c10748aeb04b58e8f': 'tether', // USDT
};

// Карта адресов токенов Polygon в CoinMarketCap ID
// Исправлены ID для USDC и USDT
const TOKEN_ADDRESS_TO_CMC_ID = {
  '0x0000000000000000000000000000000000000000': 3890, // POL
  '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619': 2396, // WETH
  '0x2791bca1f2de4661ed88a30c99a7a9449aa84174': 3408, // USDC (CoinMarketCap ID)
  '0xc2132d05d31c914a87c6611c10748aeb04b58e8f': 825,  // USDT (CoinMarketCap ID)
};

const WalletTokens = () => {
  const { provider, account } = useWeb3();
  const [tokens, setTokens] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Функция для получения цены токена через CoinGecko API
  const fetchTokenPriceFromCoinGecko = async (tokenId) => {
    if (!tokenId) return 0;
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000); // Таймаут 5 секунд
      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${tokenId}&vs_currencies=usd`, {
        signal: controller.signal
      });
      clearTimeout(timeoutId);

      if (!response.ok) {
        console.warn(`CoinGecko API ошибка для ${tokenId}: ${response.status}`);
        return 0;
      }

      const data = await response.json();
      return data[tokenId]?.usd || 0;
    } catch (error) {
      if (error.name !== 'AbortError') {
        console.warn(`Ошибка при получении цены из CoinGecko для ${tokenId}:`, error.message);
      } else {
        console.warn(`Таймаут CoinGecko API для ${tokenId}`);
      }
      return 0;
    }
  };

  // Функция для получения цены токена через CoinMarketCap API
  const fetchTokenPriceFromCoinMarketCap = async (cmcId) => {
    if (!cmcId) return 0;
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000); // Таймаут 5 секунд
      const response = await fetch(`https://api.coincap.io/v2/assets/${cmcId}`, {
        signal: controller.signal
      });
      clearTimeout(timeoutId);

      if (!response.ok) {
        console.warn(`CoinMarketCap API ошибка для ${cmcId}: ${response.status}`);
        return 0;
      }

      const data = await response.json();
      return parseFloat(data.data?.priceUsd) || 0;
    } catch (error) {
      if (error.name !== 'AbortError') {
        console.warn(`Ошибка при получении цены из CoinMarketCap для ${cmcId}:`, error.message);
      } else {
        console.warn(`Таймаут CoinMarketCap API для ${cmcId}`);
      }
      return 0;
    }
  };

  // Функция для получения цены с резервными вариантами
  const fetchTokenPriceWithFallback = async (tokenId, cmcId) => {
    let price = await fetchTokenPriceFromCoinGecko(tokenId);
    if ((price === null || price === 0) && cmcId) {
      price = await fetchTokenPriceFromCoinMarketCap(cmcId);
    }
    return price || 0;
  };

  // Функция для получения цен нескольких токенов с резервными вариантами
  const fetchMultipleTokenPricesWithFallback = async (tokenMap) => {
    const tokenIds = Object.keys(tokenMap);
    const addressToPrice = {};

    // Последовательно для предотвращения перегрузки API
    for (const address of tokenIds) {
      const { coingeckoId, cmcId } = tokenMap[address];
      addressToPrice[address] = await fetchTokenPriceWithFallback(coingeckoId, cmcId);
    }

    return addressToPrice;
  };

  // Функция для получения токенов через Etherscan V2 API (основной метод)
  const fetchTokensFromEtherscanV2 = async (accountAddress, ethProvider) => {
    if (!ethProvider || !accountAddress) return [];

    try {
      const etherscanApiKey = import.meta.env.VITE_ETHERSCAN_API_KEY;
      if (!etherscanApiKey) {
        console.warn('VITE_ETHERSCAN_API_KEY не задан в переменных окружения');
        return [];
      }

      const polygonChainId = 137;
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // Таймаут 15 секунд

      const response = await fetch(
        `https://api.etherscan.io/v2/api?chainid=${polygonChainId}&module=account&action=tokentx&address=${accountAddress}&apikey=${etherscanApiKey}&page=1&offset=100&sort=desc`,
        { signal: controller.signal }
      );
      clearTimeout(timeoutId);

      if (!response.ok) {
        console.warn(`Etherscan V2 API ошибка: ${response.status}`);
        return [];
      }

      const data = await response.json();

      if (data.status !== "1") {
        console.warn('Etherscan V2 API вернул статус 0 или ошибку:', data.message);
        return [];
      }

      const uniqueTokens = new Set();
      const tokenSampleData = {};

      // Ограничиваем количество обрабатываемых транзакций
      data.result.slice(0, 50).forEach(tx => {
        const contractAddress = tx.contractAddress.toLowerCase();
        uniqueTokens.add(contractAddress);
        if (!tokenSampleData[contractAddress]) {
          tokenSampleData[contractAddress] = {
            tokenName: tx.tokenName,
            tokenSymbol: tx.tokenSymbol,
            tokenDecimal: parseInt(tx.tokenDecimal, 10) // Убедимся, что это число
          };
        }
      });

      console.log(`Найдено ${uniqueTokens.size} уникальных токенов через Etherscan`);

      const tokenDetails = [];

      // Обрабатываем нативный токен POL отдельно
      try {
        const polBalance = await ethProvider.getBalance(accountAddress);
        // Используем BigNumber из ethers v5 для сравнения
        if (polBalance.gt(0)) {
          tokenDetails.push({
            contractAddress: '0x0000000000000000000000000000000000000000',
            tokenName: 'Polygon Ecosystem Token',
            tokenSymbol: 'POL',
            tokenDecimal: 18,
            balance: polBalance.toString() // BigNumber в строку
          });
        }
      } catch (error) {
        console.warn('Ошибка при получении баланса POL:', error.message);
      }

      // Обрабатываем каждый ERC-20 токен (ограничиваем для скорости)
      let tokenCount = 0;
      const MAX_TOKENS = 20;
      for (const tokenAddress of uniqueTokens) {
        if (tokenCount >= MAX_TOKENS) break;
        try {
          // Используем Contract из ethers v5
          const tokenContract = new ethers.Contract(tokenAddress, ERC20_ABI, ethProvider);
          const balance = await tokenContract.balanceOf(accountAddress);
          // Используем BigNumber из ethers v5 для сравнения
          if (balance.gt(0)) {
            let tokenInfo = tokenSampleData[tokenAddress];
            if (!tokenInfo) {
              // Используем Promise.allSettled корректно
              const results = await Promise.allSettled([
                tokenContract.symbol(),
                tokenContract.name(),
                tokenContract.decimals()
              ]);

              // Правильная обработка результатов
              const symbolResult = results[0];
              const nameResult = results[1];
              const decimalsResult = results[2];

              const symbolValue = symbolResult.status === 'fulfilled' ? symbolResult.value : '???';
              const nameValue = nameResult.status === 'fulfilled' ? nameResult.value : 'Unknown Token';
              // Убедимся, что decimals - это число
              const decimalsValue = decimalsResult.status === 'fulfilled' && !isNaN(parseInt(decimalsResult.value)) ?
                parseInt(decimalsResult.value) : 18;

              tokenInfo = {
                tokenName: nameValue,
                tokenSymbol: symbolValue,
                tokenDecimal: decimalsValue
              };
            }

            tokenDetails.push({
              contractAddress: tokenAddress,
              tokenName: tokenInfo.tokenName,
              tokenSymbol: tokenInfo.tokenSymbol,
              tokenDecimal: tokenInfo.tokenDecimal,
              balance: balance.toString() // BigNumber в строку
            });

            tokenCount++;
          }
        } catch (error) {
          console.warn(`Ошибка при обработке токена ${tokenAddress}:`, error.message);
        }
      }

      return tokenDetails;
    } catch (error) {
      if (error.name !== 'AbortError') {
        console.error('Критическая ошибка Etherscan V2:', error.message);
      } else {
        console.warn('Таймаут Etherscan V2');
      }
      return [];
    }
  };

  // Функция для получения токенов через прямой вызов balanceOf (резервный метод)
  const fetchTokensDirectBalance = async (accountAddress, ethProvider) => {
    if (!ethProvider || !accountAddress) return [];

    try {
      console.log('Используется резервный метод получения токенов');

      const tokens = [];

      try {
        const polBalance = await ethProvider.getBalance(accountAddress);
        // Используем BigNumber из ethers v5 для сравнения
        if (polBalance.gt(0)) {
          tokens.push({
            contractAddress: '0x0000000000000000000000000000000000000000',
            tokenName: 'Polygon Ecosystem Token',
            tokenSymbol: 'POL',
            tokenDecimal: 18,
            balance: polBalance.toString()
          });
        }
      } catch (error) {
        console.warn('Ошибка при получении баланса POL в резервном методе:', error.message);
      }

      // Здесь можно добавить вызовы balanceOf для известных адресов токенов
      // Например, для USDC, USDT и т.д., если Etherscan API недоступен
      const knownTokens = [
        { address: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174', name: 'USD Coin', symbol: 'USDC', decimals: 6 },
        { address: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f', name: 'Tether USD', symbol: 'USDT', decimals: 6 },
        { address: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619', name: 'Wrapped Ether', symbol: 'WETH', decimals: 18 },
        // Добавьте другие известные токены по необходимости
      ];

      for (const token of knownTokens) {
        try {
          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, ethProvider);
          const balance = await tokenContract.balanceOf(accountAddress);
          if (balance.gt(0)) {
            tokens.push({
              contractAddress: token.address,
              tokenName: token.name,
              tokenSymbol: token.symbol,
              tokenDecimal: token.decimals,
              balance: balance.toString()
            });
          }
        } catch (error) {
          console.warn(`Ошибка при получении баланса для ${token.symbol}:`, error.message);
        }
      }

      return tokens;
    } catch (error) {
      console.warn('Не удалось получить токены через резервный метод:', error.message);
      return [];
    }
  };

  // Функция для получения балансов токенов
  const fetchTokenBalances = async () => {
    if (!provider || !account) {
      setTokens([]);
      setLoading(false);
      return;
    }

    setLoading(true);
    setError(null);
    let tokenList = [];

    try {
      // Используем provider напрямую, как в контексте
      const ethProvider = provider;

      // Попытка получить токены через Etherscan V2 API
      try {
        console.log('Попытка получения токенов через Etherscan V2 API...');
        tokenList = await fetchTokensFromEtherscanV2(account, ethProvider);
        console.log('Токены получены через Etherscan V2:', tokenList.length);
      } catch (etherscanError) {
        console.error('Etherscan V2 API недоступен, пробуем резервный метод...', etherscanError.message);
        try {
          tokenList = await fetchTokensDirectBalance(account, ethProvider);
          console.log('Токены получены через резервный метод:', tokenList.length);
        } catch (directError) {
          console.error('Резервный метод также недоступен:', directError.message);
          // Не блокируем UI критической ошибкой, просто показываем пустой список
          tokenList = [];
        }
      }

      // Преобразуем данные токенов в формат для отображения
      const processedTokens = tokenList
        .filter(token => {
          try {
            // Используем BigNumber из ethers v5 для проверки
            const balanceBN = ethers.BigNumber.from(token.balance);
            return balanceBN.gt(0);
          } catch (e) {
            console.warn("Ошибка при проверке баланса BN:", e.message);
            return false;
          }
        })
        .map(tokenInfo => {
          try {
            const balanceBN = ethers.BigNumber.from(tokenInfo.balance);
            // Используем formatUnits из ethers v5
            const formattedBalance = ethers.utils.formatUnits(balanceBN, tokenInfo.tokenDecimal);
            return {
              address: tokenInfo.contractAddress,
              symbol: tokenInfo.tokenSymbol,
              name: tokenInfo.tokenName,
              balance: formattedBalance,
              rawBalance: balanceBN.toString(),
              decimals: tokenInfo.tokenDecimal
            };
          } catch (formatError) {
            console.warn(`Ошибка при форматировании баланса токена ${tokenInfo.contractAddress}:`, formatError.message);
            return null;
          }
        })
        .filter(token => token !== null && parseFloat(token.balance) > 0);

      // Подготавливаем карту токенов для получения цен
      const tokenPriceMap = {};
      processedTokens.forEach(token => {
        const lowerAddress = token.address.toLowerCase();
        // Используем символ как fallback для CoinGecko ID
        tokenPriceMap[lowerAddress] = {
          coingeckoId: TOKEN_ADDRESS_TO_COINGECKO_ID[lowerAddress] || token.symbol?.toLowerCase(),
          cmcId: TOKEN_ADDRESS_TO_CMC_ID[lowerAddress]
        };
      });

      // Получаем цены для всех токенов с резервными вариантами
      const addressToPrice = await fetchMultipleTokenPricesWithFallback(tokenPriceMap);

      // Добавляем цены и стоимость к токенам
      const tokensWithPrices = processedTokens.map(token => {
        // Убедимся, что баланс - число
        const balanceFloat = parseFloat(token.balance);
        if (isNaN(balanceFloat)) {
          return { ...token, price: '0.0000', value: '0.00' };
        }

        const price = addressToPrice[token.address.toLowerCase()] || 0;
        const value = balanceFloat * price;

        // Защита от NaN при форматировании
        const formattedPrice = isNaN(price) ? '0.0000' : price.toFixed(4);
        const formattedValue = isNaN(value) ? '0.00' : value.toFixed(2);

        return {
          ...token,
          price: formattedPrice,
          value: formattedValue
        };
      });

      setTokens(tokensWithPrices);
    } catch (err) {
      console.error("Критическая ошибка при получении балансов токенов:", err);
      setError(`Не удалось получить балансы токенов: ${err.message || 'Неизвестная ошибка'}`);
    } finally {
      setLoading(false);
    }
  };


  useEffect(() => {
    let isMounted = true;
    const fetchData = async () => {
      await fetchTokenBalances();
      if (!isMounted) return;
    };

    fetchData();

    return () => {
      isMounted = false;
    };
  }, [provider, account]);

  // Функция для копирования адреса в буфер обмена
  const copyToClipboard = async (address) => {
    if (!address) return;
    try {
      await navigator.clipboard.writeText(address);
    } catch (err) {
      console.error('Ошибка при копировании: ', err);
    }
  };

  // Функция для открытия в Polygonscan
  const openInPolygonscan = (address) => {
    if (address && address !== '0x0000000000000000000000000000000000000000') {
      const url = `https://polygonscan.com/token/${address}`;
      window.open(url, '_blank', 'noopener,noreferrer');
    }
  };

  // Функция для открытия в Blockscan
  const openInBlockscan = (address) => {
    if (address && address !== '0x0000000000000000000000000000000000000000') {
      const url = `https://blockscan.com/address/${address}`;
      window.open(url, '_blank', 'noopener,noreferrer');
    }
  };

  // Функция для форматирования адреса
  const formatAddress = (address) => {
    if (!address) return '';
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
  };

  // Вычисляем общий баланс
  const totalValue = tokens.reduce((sum, token) => {
    const value = parseFloat(token.value);
    return isNaN(value) ? sum : sum + value;
  }, 0);

  // Функции-заглушки для обмена и сжигания
  const handleSwap = (token) => {
    console.log("Обмен токена:", token);
    alert(`Функция обмена для ${token.symbol} будет реализована`);
  };

  const handleBurn = (token) => {
    console.log("Сжечь токен:", token);
    alert(`Функция сжигания для ${token.symbol} будет реализована`);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cyan-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-900 bg-opacity-30 border border-red-700 text-red-300 px-4 py-3 rounded relative" role="alert">
        <strong className="font-bold">Ошибка! </strong>
        <span className="block sm:inline">{error}</span>
      </div>
    );
  }

  return (
    <div className="bg-gray-800 bg-opacity-50 rounded-xl shadow-lg overflow-hidden border border-gray-700">
      {/* Заголовок с адресом кошелька и общим балансом */}
      <div className="px-6 py-4 border-b border-gray-700">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <h2 className="text-xl font-bold text-white mb-2 sm:mb-0">Токены кошелька</h2>
          {account && (
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-400">{formatAddress(account)}</span>
              <button
                onClick={() => copyToClipboard(account)}
                className="p-1 rounded hover:bg-gray-600 transition text-gray-400 hover:text-white"
                title="Копировать адрес"
                aria-label="Копировать адрес кошелька"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
              </button>
              <button
                onClick={() => openInPolygonscan(account)}
                className="p-1 rounded hover:bg-gray-600 transition text-gray-400 hover:text-white"
                title="Посмотреть на Polygonscan"
                aria-label="Открыть кошелек в Polygonscan"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
              </button>
            </div>
          )}
        </div>
        {account && (
          <div className="mt-2 text-sm text-gray-400">
            Общий баланс: <span className="font-medium text-cyan-400">${totalValue.toFixed(2)}</span>
          </div>
        )}
      </div>

      {/* Таблица токенов */}
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-700">
          <thead className="bg-gray-700 bg-opacity-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Токен</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Баланс</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Цена</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Стоимость</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Действия</th>
            </tr>
          </thead>
          <tbody className="bg-gray-800 bg-opacity-30 divide-y divide-gray-700">
            {tokens.length > 0 ? tokens.map((token) => (
              <tr key={token.address} className="hover:bg-gray-700 hover:bg-opacity-30 transition">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 h-10 w-10 rounded-full bg-gradient-to-r from-cyan-500 to-blue-500 flex items-center justify-center text-white font-bold">
                      {token.symbol.charAt(0)}
                    </div>
                    <div className="ml-4">
                      <div className="text-sm font-medium text-white">{token.symbol}</div>
                      <div className="text-sm text-gray-400">{token.name}</div>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                  {parseFloat(token.balance).toFixed(4)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">${token.price}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-cyan-400">${token.value}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <div className="flex flex-wrap gap-2">
                    <button
                      onClick={() => handleSwap(token)}
                      className="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded transition text-xs"
                      title="Обменять"
                      aria-label={`Обменять ${token.symbol}`}
                    >
                      Обмен
                    </button>
                    <button
                      onClick={() => handleBurn(token)}
                      className="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded transition text-xs"
                      title="Сжечь"
                      aria-label={`Сжечь ${token.symbol}`}
                    >
                      Сжечь
                    </button>
                    <button
                      onClick={() => copyToClipboard(token.address)}
                      className="p-1 rounded hover:bg-gray-600 transition text-gray-400 hover:text-white"
                      title="Копировать адрес"
                      aria-label={`Копировать адрес ${token.symbol}`}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                    </button>
                    <button
                      onClick={() => openInPolygonscan(token.address)}
                      className="p-1 rounded hover:bg-gray-600 transition text-gray-400 hover:text-white"
                      title="Посмотреть на Polygonscan"
                      aria-label={`Открыть ${token.symbol} в Polygonscan`}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                      </svg>
                    </button>
                    <button
                      onClick={() => openInBlockscan(token.address)}
                      className="p-1 rounded hover:bg-gray-600 transition text-gray-400 hover:text-white"
                      title="Посмотреть на Blockscan"
                      aria-label={`Открыть ${token.symbol} в Blockscan`}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                    </button>
                  </div>
                </td>
              </tr>
            )) : (
              <tr>
                <td colSpan="5" className="px-6 py-4 text-center text-sm text-gray-500">
                  Токены не найдены
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default WalletTokens;
]]>
</file>
<file path="frontend\src\context\Web3Context.jsx">
<![CDATA[
import React, { createContext, useContext, useState, useEffect } from 'react';
import { ethers } from 'ethers';

// Адреса администраторов
const ADMIN_ADDRESSES = [
  "0xe00Fb1e7E860C089503D2c842C683a7A3E57b614",
  "0x40A7e95F9DaEcDeEA9Ae823aC234af2C616C2D10"
];

const Web3Context = createContext();

// Экспортируем хук для удобства использования
export const useWeb3 = () => {
  const context = useContext(Web3Context);
  if (!context) {
    throw new Error('useWeb3 must be used within a Web3Provider');
  }
  return context;
};

export const Web3Provider = ({ children }) => {
  const [provider, setProvider] = useState(null);
  const [signer, setSigner] = useState(null);
  const [account, setAccount] = useState(null);
  const [chainId, setChainId] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [error, setError] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false); // Новое состояние для проверки админа

  const connectWallet = async () => {
    setError(null);
    if (typeof window.ethereum !== 'undefined') {
      try {
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        const web3Provider = new ethers.providers.Web3Provider(window.ethereum);
        const web3Signer = web3Provider.getSigner();
        const network = await web3Provider.getNetwork();

        setProvider(web3Provider);
        setSigner(web3Signer);
        setAccount(accounts[0]);
        setChainId(network.chainId);
        setIsConnected(true);
        // Проверяем, является ли пользователь администратором
        setIsAdmin(ADMIN_ADDRESSES.some(addr => addr.toLowerCase() === accounts[0].toLowerCase()));
      } catch (err) {
        console.error("Ошибка подключения к кошельку:", err);
        setError("Не удалось подключиться к кошельку. Пожалуйста, попробуйте еще раз.");
      }
    } else {
      setError("Пожалуйста, установите MetaMask!");
    }
  };

  const disconnectWallet = () => {
    setProvider(null);
    setSigner(null);
    setAccount(null);
    setChainId(null);
    setIsConnected(false);
    setError(null);
    setIsAdmin(false); // Сбрасываем состояние администратора
  };

  useEffect(() => {
    const handleAccountsChanged = (accounts) => {
      if (accounts.length === 0) {
        disconnectWallet();
      } else {
        setAccount(accounts[0]);
        // Проверяем, является ли пользователь администратором при смене аккаунта
        setIsAdmin(ADMIN_ADDRESSES.some(addr => addr.toLowerCase() === accounts[0].toLowerCase()));
      }
    };

    const handleChainChanged = (_chainId) => {
      window.location.reload();
    };

    if (window.ethereum) {
      window.ethereum.on('accountsChanged', handleAccountsChanged);
      window.ethereum.on('chainChanged', handleChainChanged);
    }

    // Очистка слушателей при размонтировании компонента
    return () => {
      if (window.ethereum) {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
        window.ethereum.removeListener('chainChanged', handleChainChanged);
      }
    };
  }, []);

  return (
    <Web3Context.Provider value={{
      provider,
      signer,
      account,
      chainId,
      isConnected,
      isAdmin, // Экспортируем состояние администратора
      connectWallet,
      disconnectWallet,
      error
    }}>
      {children}
    </Web3Context.Provider>
  );
};
]]>
</file>
<file path="frontend\src\index.css">
<![CDATA[
@tailwind base;
@tailwind components;
@tailwind utilities;
]]>
</file>
<file path="frontend\src\main.jsx">
<![CDATA[
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import { Web3Provider } from './context/Web3Context';
// Удален импорт TokenProvider, так как он не используется в рабочей версии

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Web3Provider>
      <App />
    </Web3Provider>
  </React.StrictMode>,
);
]]>
</file>
<file path="frontend\tailwind.config.js">
<![CDATA[
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
]]>
</file>
<file path="frontend\vite.config.js">
<![CDATA[
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    host: true, // Для работы в контейнерах/StackBlitz
    strictPort: true,
    // Отключение HMR для обхода проблемы CSP с 'eval'
    hmr: false,
    // Альтернативно, можно попробовать настроить HMR на другой порт (иногда помогает)
    // hmr: {
    //   port: 3001 // Или другой свободный порт
    // }
  },
  build: {
    outDir: 'dist', // Сборка будет в frontend/dist
    emptyOutDir: true
  },
  // Добавим базовый путь, если деплоим не в корень (обычно не нужно для Netlify)
  // base: '/', 
})
]]>
</file>
<file path="hardhat.config.js">
<![CDATA[
require("@nomiclabs/hardhat-waffle");
require("dotenv").config();

module.exports = {
  solidity: "0.8.17",
  networks: {
    polygon: {
      url: process.env.ALCHEMY_POLYGON_MAINNET_URL,
      accounts: [process.env.PRIVATE_KEY]
    }
  }
};
]]>
</file>
<file path="index.html">
<![CDATA[
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Secure DeFi System</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/index.js"></script>
</body>
</html>
]]>
</file>
<file path="netlify.toml">
<![CDATA[
[build]
command = "cd frontend && npm install --legacy-peer-deps && npm run build"
publish = "frontend/dist"

# Настройка перенаправления для клиентского роутинга
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
]]>
</file>
<file path="package.json">
<![CDATA[
{
  "name": "defi-pool-project",
  "version": "1.0.0",
  "description": "DeFi пул ликвидности + хранилище токенов",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:frontend": "cd frontend && npm install --legacy-peer-deps && npm run build",
    "preview": "vite preview",
    "test": "npx hardhat test",
    "deploy:factory": "npx hardhat run scripts/deploy-factory.js --network polygon",
    "create:pool": "npx hardhat run scripts/create-pool.js --network polygon",
    "deploy:vault": "npx hardhat run scripts/deploy-vault.js --network polygon"
  },
  "dependencies": {
    "@nomiclabs/hardhat-ethers": "^2.0.6",
    "@nomiclabs/hardhat-waffle": "^2.0.6",
    "@openzeppelin/contracts": "^4.9.0",
    "ethers": "^5.7.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0"
  },
  "devDependencies": {
    "@types/react": "^18.0.27",
    "@types/react-dom": "^18.0.10",
    "@vitejs/plugin-react": "^3.1.0",
    "autoprefixer": "^10.4.21",
    "chai": "^4.3.7",
    "dotenv": "^16.0.3",
    "hardhat": "^2.14.0",
    "mocha": "^10.2.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.2.7",
    "vite": "^4.1.0"
  }
}
]]>
</file>
<file path="postcss.config.js">
<![CDATA[
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
]]>
</file>
<file path="scripts\create-pool.js">
<![CDATA[
const hre = require("hardhat");

async function main() {
  const factoryAddress = process.env.FACTORY_ADDRESS;
  const PoolFactory = await hre.ethers.getContractFactory("PoolFactory");
  const poolFactory = PoolFactory.attach(factoryAddress);

  const tokenA = process.env.TOKEN_A_ADDRESS;
  const tokenB = process.env.TOKEN_B_ADDRESS;
  const feeRate = 30; // 0.3%

  const tx = await poolFactory.createPool(tokenA, tokenB, feeRate);
  const receipt = await tx.wait();

  const poolAddress = receipt.events[0].args.pool;
  console.log("Pool created at:", poolAddress);
}

main().catch(console.error);
]]>
</file>
<file path="scripts\deploy-factory.js">
<![CDATA[
const hre = require("hardhat");

async function main() {
  const PoolFactory = await hre.ethers.getContractFactory("PoolFactory");
  const poolFactory = await PoolFactory.deploy();
  await poolFactory.deployed();

  console.log("PoolFactory deployed to:", poolFactory.address);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
]]>
</file>
<file path="scripts\deploy-vault.js">
<![CDATA[
const hre = require("hardhat");

async function main() {
  const TokenVault = await hre.ethers.getContractFactory("TokenVault");
  const tokenVault = await TokenVault.deploy();
  await tokenVault.deployed();

  console.log("TokenVault deployed to:", tokenVault.address);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
]]>
</file>
<file path="scripts\deploy.js">
<![CDATA[
const hre = require("hardhat");

async function main() {
  const PoolFactory = await hre.ethers.getContractFactory("PoolFactory");
  const poolFactory = await PoolFactory.deploy();
  await poolFactory.deployed();
  console.log("PoolFactory deployed to:", poolFactory.address);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
]]>
</file>
<file path="tailwind.config.js">
<![CDATA[
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
    "./frontend/index.html",
    "./frontend/src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
]]>
</file>
<file path="test\pool.test.js">
<![CDATA[
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("LiquidityPool", function () {
  let owner, user, pool, factory;

  beforeEach(async () => {
    [owner, user] = await ethers.getSigners();

    // Деплой фабрики пулов
    const PoolFactory = await ethers.getContractFactory("PoolFactory");
    factory = await PoolFactory.deploy();
    await factory.deployed();

    // Создание пула с токенами и комиссией
    const tokenA = ethers.constants.AddressZero; // Заглушка для токена A
    const tokenB = ethers.constants.AddressZero; // Заглушка для токена B
    const feeRate = 30; // 0.3%

    const tx = await factory.createPool(tokenA, tokenB, feeRate);
    const receipt = await tx.wait();
    const poolAddress = receipt.events[0].args.pool;

    // Подключение к созданному пулу
    pool = await ethers.getContractAt("LiquidityPool", poolAddress);
  });

  it("Should add liquidity with 0.1 tokens", async function () {
    const amount0 = ethers.utils.parseUnits("0.1", 18); // 0.1 токена A
    const amount1 = ethers.utils.parseUnits("0.1", 18); // 0.1 токена B
    const lowerSqrtPrice = 980000;
    const upperSqrtPrice = 1020000;

    await pool.addLiquidity(amount0, amount1, lowerSqrtPrice, upperSqrtPrice);

    const reserves = await pool.getReserves();
    expect(reserves[0]).to.equal(amount0);
    expect(reserves[1]).to.equal(amount1);
  });

  it("Should NOT allow non-owner to remove liquidity", async function () {
    const amount0 = ethers.utils.parseUnits("0.1", 18);
    const amount1 = ethers.utils.parseUnits("0.1", 18);
    const lowerSqrtPrice = 980000;
    const upperSqrtPrice = 1020000;

    await pool.addLiquidity(amount0, amount1, lowerSqrtPrice, upperSqrtPrice);
    const tokenId = 0;

    await expect(pool.connect(user).removeLiquidity(tokenId))
      .to.be.revertedWith("Only owner can remove liquidity");
  });
});
]]>
</file>
<file path="test\vault.test.js">
<![CDATA[
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("TokenVault", function () {
  let owner, user, tokenVault, mockTokenA, mockTokenB;

  beforeEach(async () => {
    [owner, user] = await ethers.getSigners();

    // Деплой мок токена
    const MockToken = await ethers.getContractFactory("MockERC20");
    mockTokenA = await MockToken.deploy("TokenA", "TKA", 100000);
    mockTokenB = await MockToken.deploy("TokenB", "TKB", 100000);
    await mockTokenA.deployed();
    await mockTokenB.deployed();

    // Деплой хранилища
    const Vault = await ethers.getContractFactory("TokenVault");
    tokenVault = await Vault.deploy();
    await tokenVault.deployed();

    // Выдать пользователю TKA
    await mockTokenA.transfer(user.address, ethers.utils.parseUnits("1000", 18));
  });

  it("Should allow deposit and withdraw of tokens", async function () {
    const amount = ethers.utils.parseUnits("0.1", 18);

    // Владелец депонирует токены
    await mockTokenA.connect(owner).approve(tokenVault.address, amount);
    await tokenVault.connect(owner).deposit(mockTokenA.address, amount);

    const depositId = 0;
    const deposit = await tokenVault.getDeposit(depositId);

    expect(deposit.amount).to.equal(amount);

    // Только владелец может вывести токены
    await tokenVault.connect(owner).withdraw(depositId);
    const updatedDeposit = await tokenVault.getDeposit(depositId);
    expect(updatedDeposit.amount).to.equal(0);
  });

  it("Should NOT allow non-depositor to withdraw", async function () {
    const amount = ethers.utils.parseUnits("0.1", 18);

    await mockTokenA.connect(owner).approve(tokenVault.address, amount);
    await tokenVault.connect(owner).deposit(mockTokenA.address, amount);

    const depositId = 0;

    await expect(tokenVault.connect(user).withdraw(depositId))
      .to.be.revertedWith("Only depositor can withdraw");
  });
});
]]>
</file>
<file path="vite.config.js">
<![CDATA[
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  root: 'frontend', // Указываем корневую директорию фронтенда
  server: {
    port: 3000,
    strictPort: true, // StackBlitz может требовать точного порта
    host: true,       // Для доступности сервера dev в StackBlitz
  },
  build: {
    outDir: '../dist', // Сборка будет в корневой папке dist
    emptyOutDir: true, // Очищать папку сборки перед каждой сборкой
  },
  // Указываем алиасы для путей, если это необходимо (опционально)
  resolve: {
    alias: {
      '@': '/src', // Алиас для папки src
    },
  },
});
]]>
</file>